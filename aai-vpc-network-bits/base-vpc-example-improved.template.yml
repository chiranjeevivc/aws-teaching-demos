AWSTemplateFormatVersion: 2010-09-09

# This CloudFormation template deploys a basic VPC / Network.  Specifically:
# It deploys a VPC with 4 subnets (2 public, 2 private) across 2 Availability Zones
# The VPC and subnets are exported for use by other stacks.
# Creation of private subnets is optional
# Optionally will create a TransitGateway and attach it


Parameters:
  CreatePrivateSubnets:
    Type: String
    AllowedValues: 
    - True
    - False
    Default: False
    Description: Do you want to create private subnets in addition to public subnets?

  CreateTransitGateway:
    Type: String
    AllowedValues: 
    - True
    - False
    Default: True
    Description: Do you want to create a transit gateway or not?

  SecondOctet: 
    Type: Number
    Default: 1
    Description:  The second octet in a CIDR range.  I.e. 10.X.0.0/16

  CidrLambdaArn: 
    Type: String
    Description:  ARN of the Lambda used to acquire CIDR addresses

  Network: 
    Type: String
    Description:  The logical name of the network we are building
    AllowedValues: 
    - Alpha
    - Beta
    - Gamma

Conditions:
  BuildPrivateSubnets:  !Equals [ !Ref CreatePrivateSubnets, True ] 
  BuildTransitGateway:  !Equals [ !Ref CreateTransitGateway, True ] 


Resources:

  # This custom resource calls the Lambda function which generates CIDR values for VPCs and Subnets.
  CidrGenerator:
    Type: Custom::helper
    Properties:
      ServiceToken: !Ref CidrLambdaArn
      secondOctet: !Ref SecondOctet


  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !GetAtt CidrGenerator.VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC

  VPCExtraBlock1:
    Type: AWS::EC2::VPCCidrBlock
    Properties: 
      CidrBlock: !GetAtt CidrGenerator.VpcCidrExtra1
      VpcId: !Ref VPC

  VPCExtraBlock2:
    Type: AWS::EC2::VPCCidrBlock
    Properties: 
      CidrBlock: !GetAtt CidrGenerator.VpcCidrExtra2
      VpcId: !Ref VPC

  VPCExtraBlock3:
    Type: AWS::EC2::VPCCidrBlock
    Properties: 
      CidrBlock: !GetAtt CidrGenerator.VpcCidrExtra3
      VpcId: !Ref VPC

  VPCExtraBlock4:
    Type: AWS::EC2::VPCCidrBlock
    Properties: 
      CidrBlock: !GetAtt CidrGenerator.VpcCidrExtra4
      VpcId: !Ref VPC


  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now some subnets, 2 public and 2 private:
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:  !GetAtt CidrGenerator.PublicSubnetA
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:  !GetAtt CidrGenerator.PublicSubnetB
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      CidrBlock:  !GetAtt CidrGenerator.PrivateSubnetA
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      CidrBlock:  !GetAtt CidrGenerator.PrivateSubnetB
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B
        
  # Some route tables for our subnets:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRoute2:   # Public route table has routing to transit gateway:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref TransitGateway
      
  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateRoute2:            # Private route table can access transit gateway
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    DependsOn: TransitGatewayAttachment
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref TransitGateway


  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateSubnets
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateSubnets
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
      
  # A NAT Gateway will be built and used if the user selected Private subnets and a Gateway instead of an EC2 instance.  
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildPrivateSubnets
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildPrivateSubnets
    Properties:
      Domain: VPC

  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Condition: BuildTransitGateway
    Properties: 
      AutoAcceptSharedAttachments: enable   # Hoping this makes attaching VPCs easier
      Tags:
      - Key: Network
        Value: !Ref Network

  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Condition: BuildTransitGateway
    Properties: 
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref VPC
      SubnetIds: 
      - !Ref PublicSubnetA
      - !Ref PublicSubnetB
      Tags:
      - Key: Network
        Value: !Ref Network


Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  PublicSubnetA:
    Description: First Public Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
  PublicSubnetB:
    Description: Second Public Subnet
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB
  PrivateSubnetA:
    Condition: BuildPrivateSubnets
    Description: First Private Subnet
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA
  PrivateSubnetB:
    Condition: BuildPrivateSubnets
    Description: Second Private Subnet
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB
  TransitGatewayId:
    Description: ID of the transit gateway
    Condition: BuildTransitGateway
    Value: !Ref TransitGateway
    Export:
      Name: !Sub ${AWS::StackName}-TransitGateway
