AWSTemplateFormatVersion: 2010-09-09

# This CloudFormation template deploys a basic VPC / Network.  Specifically:
# It deploys a VPC with 4 subnets (2 public, 2 private) across 2 Availability Zones
# The VPC and subnets are exported for use by other stacks.

Metadata: 
  # Control the UI display when running this template from the AWS Management Console:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - NumberOfAZs
          - PrivateSubnets

Parameters:
  PrivateSubnets:
    Type: String
    AllowedValues: 
    - True
    - False
    Default: True
    Description: Do you want to create private subnets in addition to public subnets?

  SecondOctet: 
    Type: Number
    Default: 1
    Description:  The second octet in a CIDR range.  I.e. 10.X.0.0/16

  CidrLambdaArn: 
    Type: String
    Description:  ARN of the Lambda used to acquire CIDR addresses

  TransitGatewayStack:
    Type: String
    Description:  Name of the CloudFormation stack containing the transit gateway

  TransitGatewayId:
    Type:  String
    Description:  ID of the TransitGateway.  May be in another region.  

Conditions:
  BuildPrivateSubnets:  !Equals [ !Ref PrivateSubnets, True ] 
  # HOW TO MAKE TRANSIT GATEWAY CONDITIONAL?


Mappings:
  RegionMap:
    ap-southeast-1:           # Singapore
      Vpc1: 10.1.0.0/16
      Vpc2: 10.2.0.0/16
      Vpc3: 10.3.0.0/16
      Vpc4: 10.4.0.0/16
      Vpc5: 10.5.0.0/16
      PublicSubnet1A:  10.1.10.0/24
      PublicSubnet1B:  10.1.20.0/24
      PublicSubnet1C:  10.1.30.0/24
      PrivateSubnet1A: 10.1.50.0/24
      PrivateSubnet1B: 10.1.60.0/24
      PrivateSubnet1C: 10.1.70.0/24
    ap-southeast-2:           # Sydney
      Vpc1: 10.11.0.0/16
      Vpc2: 10.12.0.0/16
      Vpc3: 10.13.0.0/16
      Vpc4: 10.14.0.0/16
      Vpc5: 10.15.0.0/16
      PublicSubnet1A:  10.11.10.0/24
      PublicSubnet1B:  10.11.20.0/24
      PublicSubnet1C:  10.11.30.0/24
      PrivateSubnet1A: 10.11.50.0/24
      PrivateSubnet1B: 10.11.60.0/24
      PrivateSubnet1C: 10.11.70.0/24
    ap-northeast-1:           # Tokyo
      Vpc1: 10.21.0.0/16
      Vpc2: 10.22.0.0/16
      Vpc3: 10.23.0.0/16
      Vpc4: 10.24.0.0/16
      Vpc5: 10.25.0.0/16
      PublicSubnet1A:  10.21.10.0/24
      PublicSubnet1B:  10.21.20.0/24
      PublicSubnet1C:  10.21.30.0/24
      PrivateSubnet1A: 10.21.50.0/24
      PrivateSubnet1B: 10.21.60.0/24
      PrivateSubnet1C: 10.21.70.0/24


Resources:

  # This custom resource calls the Lambda function which generates CIDR values for VPCs and Subnets.
  HelperCustomResource:
    Type: Custom::helper
    Properties:
      ServiceToken: !Ref CidrLambdaArn
      secondOctet: !Ref SecondOctet


  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !GetAtt HelperCustomResource.VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC

  VPCExtraBlock1:
    Type: AWS::EC2::VPCCidrBlock
    Properties: 
      CidrBlock: !GetAtt HelperCustomResource.VpcCidrExtra1
      VpcId: !Ref VPC

  VPCExtraBlock2:
    Type: AWS::EC2::VPCCidrBlock
    Properties: 
      CidrBlock: !GetAtt HelperCustomResource.VpcCidrExtra2
      VpcId: !Ref VPC

  VPCExtraBlock3:
    Type: AWS::EC2::VPCCidrBlock
    Properties: 
      CidrBlock: !GetAtt HelperCustomResource.VpcCidrExtra3
      VpcId: !Ref VPC

  VPCExtraBlock4:
    Type: AWS::EC2::VPCCidrBlock
    Properties: 
      CidrBlock: !GetAtt HelperCustomResource.VpcCidrExtra4
      VpcId: !Ref VPC


  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now some subnets, 2 public and 2 private:
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:  !GetAtt HelperCustomResource.PublicSubnetA
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:  !GetAtt HelperCustomResource.PublicSubnetB
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      CidrBlock:  !GetAtt HelperCustomResource.PrivateSubnetA
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      CidrBlock:  !GetAtt HelperCustomResource.PrivateSubnetB
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B
        
  # Some route tables for our subnets:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway


  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateSubnets
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateSubnets
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
      
  # A NAT Gateway will be built and used if the user selected Private subnets and a Gateway instead of an EC2 instance.  
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildPrivateSubnets
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  # If there was a transit gateway provided, attach this vpc to it:
  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      TransitGatewayId: !Ref TransitGatewayId
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB



Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  PublicSubnetA:
    Description: First Public Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
  PublicSubnetB:
    Description: Second Public Subnet
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB
  PrivateSubnetA:
    Condition: BuildPrivateSubnets
    Description: First Private Subnet
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA
  PrivateSubnetB:
    Condition: BuildPrivateSubnets
    Description: Second Private Subnet
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB
