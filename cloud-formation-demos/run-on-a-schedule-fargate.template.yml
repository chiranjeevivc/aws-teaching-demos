AWSTemplateFormatVersion: 2010-09-09

# This stack demonstrates how to launch a Docker container in Fargate on a schedule, such as once per day or once a week.
# The use-case is offline work that requires more than 15 minutes to run - too long for a Lambda.
# The specified Docker container will launch as scheduled, perform whatever work is needed, then stop itself.
# You can use any schedule in the execution rate, containers typically start within seconds.
# For demonstration purposes, the work performed by the instance is just sending a sample message to the designated phone number.  Change this to do whatever real work you want.
# For simplicity, a public subnet is used.

Metadata:
  # Controlling the order of the parameters on the CloudFormation page;
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network
        Parameters:
          - VPC
          - PublicSubnet
      - Label:
          default: Container
        Parameters:
          - ECSCluster
          - DockerImage
      - Label:
          default: Notification
        Parameters:
          - NotificationPhoneNumber
          - NotificationMessage
          - ExecutionRate

Parameters:

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC, one with public internet access.  

  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in your selected VPC.  Your Fargate container will run here.

  ECSCluster:
    Description:  The ECS Cluster that is ready to run our service / task definition.
    Type: String    
    Default: default

  DockerImage:
    Description:  The Docker image that we wish to run on a schedule.
    Type: String    
    Default: amazon/aws-cli

  ExecutionRate:
    Type: String
    Description: How often do you want your instance to run?  May be a cron expression.  Suggest a minimum of no less than 5 minutes.
    Default:  rate(15 minutes)

  NotificationPhoneNumber:
    Description:  Cell Phone / SMS Number to be contacted at when work is complete.
    Type:  String
    Default:  "+12223334444"

  NotificationMessage:
    Description:  Message to send.
    Type:  String
    Default:  "This message was sent from a container running on Fargate"


Resources:

  # This event rule fires based on the given schedule expression.  
  # It launches the ECS task:
  EventRuleOnSchedule:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub ${AWS::StackName}-ExecuteOnSchedule
      Description: Fires based on given schedule, executes ECS task target.
      ScheduleExpression: !Ref ExecutionRate
      State: ENABLED
      Targets: 
      - Id: !Sub ${AWS::StackName}-RunEcsTask
        Arn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSCluster}
        RoleArn: !GetAtt EventTargetRole.Arn
        EcsParameters:
          LaunchType: FARGATE
          TaskDefinitionArn: !Ref TaskDefinition
          NetworkConfiguration: 
            AwsVpcConfiguration:
              AssignPublicIp: ENABLED
              SecurityGroups: 
                - !Ref VanillaSecurityGroup
              Subnets: 
                - !Ref PublicSubnet

  # This TaskDefinition defines the image(s) we want to run on ECS
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-TaskDefinition
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc                   # Required and only possible value when using Fargate.
      TaskRoleArn: !Ref TaskRole            # Allows container code to make API calls.
      ExecutionRoleArn: !Ref ExecutionRole  # Required for Fargate.  Allows it to pull our images.
      Cpu: 256                              # Valid values for CPU and memory are tricky if using Fargate.
      Memory: 512
      ContainerDefinitions:
      - Name: SomethingToDo
        Image: !Ref DockerImage       # something to run.
        Command:                      # Note:  You will probably want to adjust or eliminate this command.
        - sns 
        - publish 
        - --phone-number 
        - !Ref NotificationPhoneNumber
        - --message 
        - !Ref NotificationMessage
        Essential: true
        StartTimeout:  30          # If any of our containers take more than 30 seconds to start, something is broken.
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroupFargate
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: x

  # Basic Security Group.  Our instance only needs outbound access, which is default behavior:
  VanillaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription:  Noop security group to allow outbound access.
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VanillaSecurityGroup

  EventTargetPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-EventTargetPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - ecs:Run*
            - iam:Pass*
          Resource: "*"
      Roles: 
        -  !Ref EventTargetRole   

  EventTargetRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-EventTargetRole  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole


  # This Role allows the ECS Task to write to CloudWatchLogs:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-ExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the ExecutionRole.
  # Task is allowed to write to CloudWatch logs
  # "Fargate requires task definition to have execution role ARN to support log driver awslogs."
  ExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-ExecutionPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ecr:Get*
            - ecr:BatchCheck*
            - ecr:BatchGet*
          Resource: 
            - "*"
      Roles: 
        -  !Ref ExecutionRole

  # This Role allows the containers within the ECS Task to make AWS API calls:
  TaskRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-TaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the TaskRole.
  TaskPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-TaskPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action:
            - sns:publish*
          Resource: 
            - "*"
      Roles: 
        -  !Ref TaskRole

  # Explicitly creating LogGroups allows us to clean up these on stack delete.
  CloudwatchLogsGroupFargate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}/FargateLogGroup
      RetentionInDays: 3

