AWSTemplateFormatVersion: 2010-09-09

# This CloudFormation template demonstrates an EC2 Image Pipeline
# TODO:  Add a test component for the new AMI.

Parameters:

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC, one with public subnets

  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in your selected VPC.  The AMI pipeline will launch an instance here.

  AmazonLinux2AMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: You probably won't need to change this value.  This is looking up the latest Amazon Linux 2 AMI using the Parameter Store...

  S3LoggingBucket:
    Type:  String
    Default: kk-admin/ec2-builder-logs
    Description:  S3 Bucket / Prefix where you want to put logs.  Must be in same region.

Resources:

  MyPipe:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties: 
      Name: !Sub ${AWS::StackName}-PipelineSample
      Description: Sample AMI building pipeline
      ImageRecipeArn: !GetAtt MyRecipe.Arn
      DistributionConfigurationArn: !GetAtt MyDistribution.Arn
      InfrastructureConfigurationArn: !Ref MyInfrastructure

  MyRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties: 
      Name: !Sub ${AWS::StackName}-RecipeSample
      Description: Sample Recipe
      ParentImage: !Ref AmazonLinux2AMI   # Start with the latest Amazon Linux 2 AMI
      Components: 
      - ComponentArn: !Ref MyComponent
      Version: 1.0.0

  # This component prepares the new AMI.  Essentially the "Data" property
  # contains instructions to be run on an EC2 instance.  These instructions
  # download my Spring Boot environment example and set it up to run as a service.
  # The resulting AMI will have the application automatically running on port 80 on startup.
  MyComponent:
    Type: AWS::ImageBuilder::Component
    Properties: 
      Name: !Sub ${AWS::StackName}-ComponentSample
      Description: An example component
      Platform: Linux
      Data: |
        name: SpringEnvironmentDemoLinuxDoc
        description: Not sure what these lines do but they are required
        schemaVersion: 1.0      
        phases:
        - name: build
          steps:
          - name: InstallService
            action: ExecuteBash
            inputs:
              commands: 
                - yum -y update
                - yum install wget java-1.8.0 -y
                - wget https://kk-uploads-oregon.s3.amazonaws.com/spring-cloud-aws-environment-demo-1.war
                - mv spring-cloud-aws-environment-demo-1.war  app.war
                - chmod +x app.war
                - mkdir /var/app
                - mv app.war /var/app
                - cat > app.service <<EOF
                - "[Unit]"
                - Description=Spring Boot Demo
                - "[Service]"
                - SuccessExitStatus=143
                - TimeoutStartSec=30
                - TimeoutStopSec=10
                - Restart=on-failure
                - RestartSec=5
                - ExecStart=/usr/bin/java -jar /var/app/app.war --server.port=80
                - "[Install]"
                - WantedBy=multi-user.target
                - EOF
                - mv app.service /etc/systemd/system/
                - systemctl daemon-reload
                - systemctl enable app.service
                - systemctl start app
      Version: 1.0.0

  # Controls what kind of EC2 instance we should launch to prepare the new AMI.
  # Also indicates the logging bucket.
  MyInfrastructure:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties: 
      Name: !Sub ${AWS::StackName}-InfrastructureSample
      InstanceProfileName: !Ref EC2InstanceProfile
      InstanceTypes: 
      - t3.micro
      SecurityGroupIds: 
      - !Ref EmptySecurityGroup
      SubnetId: !Ref PublicSubnet
      Logging:
        S3Logs:
          S3BucketName: !Select [0, !Split [ "/" , !Ref S3LoggingBucket ]]
          S3KeyPrefix: !Select [1, !Split [ "/" , !Ref S3LoggingBucket ]]

  # Distribution controls the name and description of the final AMI, which regions / accounts to copy it to, etc.
  MyDistribution:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties: 
      Name: !Sub ${AWS::StackName}-DistributionSample
      Description: Where to distribute my AMI
      Distributions: 
      - Region: !Ref AWS::Region
        AmiDistributionConfiguration:
            Name: 'MySpringBootDemo-{{ imagebuilder:buildDate }}'
            Description: 'description'
            AmiTags:
                AmiTagKey: 'AmiTagValue'

  # Ingress not needed.
  EmptySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Empty security group
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: EmptySecurityGroup

  # Role to be assumed by the EC2 instance when building the image.  Not sure what permissions (if any) are needed:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Inventory-App-Role2
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${S3LoggingBucket}/*

  # Attach EC2Role's permissions to each ECS Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref InstanceRole]
