AWSTemplateFormatVersion: 2010-09-09

# This template creates a (nearly) identical environment to what students produce manually in AWS Arch lab 6.
# TODO:  MAKE!


arn:aws:iam::277895624507:role/Lambda-Load-Inventory-Role:
AmazonDynamoDBFullAccess
AmanzonS3ReadOnlyAccess
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:*",
            "Effect": "Allow"
        }
    ]
}



arn:aws:iam::277895624507:role/Lambda-Check-Stock-Role:
 AWSLambdaDynamoDBExecutionRole
  AmazonSNSFullAccess


DynamoDB Table:  Inventory,  Store(string), Item(string)


S3 bucket called whatever you want, will need to trigger the load function

sns topic called "NoStock" with a sms or email subscriber to something you can see.


Lambda for Load-Inventory function python 3.7:

# Load-Inventory Lambda function
#
# This function is triggered by an object being created in an Amazon S3 bucket.
# The file is downloaded and each line is inserted into a DynamoDB table.

import json, urllib, boto3, csv

# Connect to S3 and DynamoDB
s3 = boto3.resource('s3')
dynamodb = boto3.resource('dynamodb')

# Connect to the DynamoDB tables
inventoryTable = dynamodb.Table('Inventory');

# This handler is executed every time the Lambda function is triggered
def lambda_handler(event, context):

  # Show the incoming event in the debug log
  print("Event received by Lambda function: " + json.dumps(event, indent=2))

  # Get the bucket and object key from the Event
  bucket = event['Records'][0]['s3']['bucket']['name']
  key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'])
  localFilename = '/tmp/inventory.txt'

  # Download the file from S3 to the local filesystem
  try:
    s3.meta.client.download_file(bucket, key, localFilename)
  except Exception as e:
    print(e)
    print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))
    raise e

  # Read the Inventory CSV file
  with open(localFilename) as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',')

    # Read each row in the file
    rowCount = 0
    for row in reader:
      rowCount += 1

      # Show the row in the debug log
      print(row['store'], row['item'], row['count'])

      try:
        # Insert Store, Item and Count into the Inventory table
        inventoryTable.put_item(
          Item={
            'Store':  row['store'],
            'Item':   row['item'],
            'Count':  int(row['count'])})

      except Exception as e:
         print(e)
         print("Unable to insert data into DynamoDB table".format(e))

    # Finished!
    return "%d counts inserted" % rowCount





    Lambda for Check-Stock Lambda function:

    # Stock Check Lambda function
#
# This function is triggered when values are inserted into the Inventory DynamoDB table.
# Inventory counts are checked and if an item is out of stock, a notification is sent to an SNS Topic.

import json, boto3

# This handler is executed every time the Lambda function is triggered
def lambda_handler(event, context):

  # Show the incoming event in the debug log
  print("Event received by Lambda function: " + json.dumps(event, indent=2))

  # For each inventory item added, check if the count is zero
  for record in event['Records']:
    count = int(record['dynamodb']['NewImage']['Count']['N'])

    if count == 0:
      store = record['dynamodb']['NewImage']['Store']['S']
      item  = record['dynamodb']['NewImage']['Item']['S']

      # Construct message to be sent
      message = store + ' is out of stock of ' + item
      print(message)

      # Connect to SNS
      sns = boto3.client('sns')
      alertTopic = 'NoStock'
      snsTopicArn = [t['TopicArn'] for t in sns.list_topics()['Topics']
                      if t['TopicArn'].lower().endswith(':' + alertTopic.lower())][0]

      # Send message to SNS
      sns.publish(
        TopicArn=snsTopicArn,
        Message=message,
        Subject='Inventory Alert!',
        MessageStructure='raw'
      )

  # Finished!
  return 'Successfully processed {} records.'.format(len(event['Records']))



============================
https://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-ARCHIT/v6.3.3/lab-6-serverless/web/inventory.htm?region=us-west-2&poolId=us-west-2:95b73e54-b10a-4566-b7a8-fbc5c37b3758

us-west-2:95b73e54-b10a-4566-b7a8-fbc5c37b3758




AWSTemplateFormatVersion: 2010-09-09
Description: Lab template

# DynamoDB Table
# Lambda execution roles
# Cognito Identity Pool + Roles

Resources:

###########
# DynamoDB Table
###########

  InventoryDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Inventory
      AttributeDefinitions:
        - AttributeName: Store
          AttributeType: S
        - AttributeName: Item
          AttributeType: S
      KeySchema:
        - AttributeName: Store
          KeyType: HASH
        - AttributeName: Item
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

###########
# Lambda Role
###########

  LambdaLoadInventoryRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-Load-Inventory-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
        - PolicyName: CWLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
                Effect: Allow

  LambdaCheckStockRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-Check-Stock-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole

###########
# Cognito
###########

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: mxnetServerlessIdentity
      AllowUnauthenticatedIdentities: true
  
  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated

  UnauthenticatedRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UseDynamoDB
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - mobileanalytics:PutEvents
              - cognito-sync:*
              - dynamodb:*
            Resource:
              - '*'
      Roles:
        - !Ref UnauthenticatedRole

  IdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt 
          - UnauthenticatedRole
          - Arn

Outputs:

  Dashboard:
    Description: Link to inventory dashboard
    Value: !Sub "https://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-ARCHIT/v6.3.3/lab-6-serverless/web/inventory.htm?region=${AWS::Region}&poolId=${IdentityPool}"

  IdentityPoolId:
    Value: !Ref IdentityPool
    Description: IdentityPool ID