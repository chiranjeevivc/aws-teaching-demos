AWSTemplateFormatVersion: 2010-09-09

# Stand up an EKS cluster backed by Amazon Linux instances.  

Parameters:
  
  ClusterSize:
    Type: String
    Description: The Minimum:Desired:Maximum number of EC2 worker nodes in the cluster.  
    Default:  "2:2:6"

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC with the subnets you want to use

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 3 subnets in your selected VPC.

Metadata:
  # Controlling the order of the parameters on the CloudFormation page;
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Worker Nodes
        Parameters:
          - ClusterSize
      - Label:
          default: Worker Network Configuration
        Parameters:
          - VpcId
          - SubnetIds

Resources:
  
  #  This role Allows Amazon EKS to manage your clusters on your behalf
  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EKSServiceRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: eks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  # This role is assumed by the worker nodes in our cluster
  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EKSNodeRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly


  # # This security group replaces the default.  It is basically the same except it allows TCP ingress
  # # on high-order ports, which allows us to use NodePort and LoadBalancer type services with the outside world.
  # # Probably a more secure way to achieve this in a real-world example.
  # ReplacementSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub ${AWS::StackName}-ReplacementEKSSecurityGroup
  #     GroupDescription: Alternate security group for use in an EKS cluster.  Does the same as the default but also opens up high-order ports for external ingress.
  #     VpcId: !Ref VpcId
  #     Tags:
  #     - Key: Name
  #       Value: !Sub ${AWS::StackName}-ReplacementEKSSecurityGroup

  # ReplacementSecurityGroupIntercommunicationIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     Description: Allow worker control plane and nodes to intercommunicate
  #     GroupId: !Ref ReplacementSecurityGroup
  #     SourceSecurityGroupId: !Ref ReplacementSecurityGroup
  #     IpProtocol: "-1"

  # ReplacementSecurityGroupGeneralIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     Description: Allow outside parties to use high-order ports
  #     GroupId: !Ref ReplacementSecurityGroup
  #     IpProtocol: tcp
  #     CidrIp: 0.0.0.0/0
  #     FromPort: 1025
  #     ToPort: 65535



  # The EKS Cluster itself, a bit of an anticlimax.  
  # The cluster will run in the subnets you specify using the Security Group above.
  # Can take up to 10 minutes for AWS to provision this, and it costs $.20 per hour.
  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub ${AWS::StackName}-Cluster
      RoleArn: !GetAtt EKSServiceRole.Arn
      ResourcesVpcConfig: 
        # SecurityGroupIds:
        # - !Ref ReplacementSecurityGroup
        SubnetIds: !Ref SubnetIds

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties: 
      AmiType: AL2_x86_64
      ClusterName: !Ref Cluster
      NodegroupName: !Sub ${AWS::StackName}-NodeGroup
      NodeRole: !GetAtt  EKSNodeRole.Arn
      ScalingConfig: 
        MinSize:     !Select [0,  !Split [ ":", !Ref ClusterSize ]]
        DesiredSize: !Select [1,  !Split [ ":", !Ref ClusterSize ]]
        MaxSize:     !Select [2,  !Split [ ":", !Ref ClusterSize ]]
      Subnets: !Ref SubnetIds


Outputs:

  EKSClusterConsole:
    Description: AWS management console screen where you can look at your cluster
    Value: !Join ['', ["https://", !Ref "AWS::Region", ".console.aws.amazon.com/eks/home?region=", !Ref "AWS::Region", "#/clusters/", !Ref Cluster ]]

  ClusterName:
    Description: Name of the EKS Cluster
    Value: !Ref Cluster

  CertificateAuthorityData:
    Description: The certificate-authority-data for your cluster.
    Value: !GetAtt  Cluster.CertificateAuthorityData

  EKSEndpoint:
    Description: The endpoint for your Kubernetes API server.
    Value: !GetAtt  Cluster.Endpoint

  EKSNodeRole:
    Description: Role applied to the EKS Nodes.  Used when running kubectl apply -f aws-auth-cm.yaml
    Value: !GetAtt EKSNodeRole.Arn